local t={}
t.new=function()--gestion du niveau 1 du jeu, doit toujours suivre le meme modele


	-- map1=display.newImage(map1sheet,1) -- display.newImage( "goh/carte/level1/carte1a.jpg", 0,0,true )--devrai etre en local pour niveau1
	-- map1.x=0
	-- map1.y=0
	--map1p=display.newCircle(0,0,10) --display.newImage(map1psheet,1) -- display.newImage( "goh/carte/level1/carte1p.jpg", 0,0,true )
	--map1p.x=0
	--map1p.y=0
	--map1.xScale=2
	--map1.yScale=2
	pouvoirdisp=3
	--argent=300
	--ennemipasse=10--nombre d'ennemi qui peuvent encore passer avant qu'on perdre---------------------------------------------------------------------------------------------------------------------

	t=1
end
t.affichagecarte=function(pole)
	if donneecharger[15]==0 then
		donneecharger[15]=1
		map15sheethg=graphics.newImageSheet( "goh/carte/level15/hd.jpg", { width=2048, height=1024, numFrames=1,sheetContentWidth=2048,sheetContentHeight=1024 } )
		map15sheethd=graphics.newImageSheet( "goh/carte/level15/hg.jpg", { width=2048, height=1024, numFrames=1,sheetContentWidth=2048,sheetContentHeight=1024 } )
		map15sheetbg=graphics.newImageSheet( "goh/carte/level15/bd.jpg", { width=2048, height=1024, numFrames=1,sheetContentWidth=2048,sheetContentHeight=1024 } )
		map15sheetbd=graphics.newImageSheet( "goh/carte/level15/bg.jpg", { width=2048, height=1024, numFrames=1,sheetContentWidth=2048,sheetContentHeight=1024 } )
		map15sheeto1=graphics.newImageSheet( "goh/carte/level15/left_bottom_trees.png", { width=418, height=347, numFrames=1,sheetContentWidth=418,sheetContentHeight=347 } )
		map15sheeto2=graphics.newImageSheet( "goh/carte/level15/left_trees.png", { width=609, height=312, numFrames=1,sheetContentWidth=609,sheetContentHeight=312 } )
		map15sheeto3=graphics.newImageSheet( "goh/carte/level15/left_trees_2.png", { width=475, height=309, numFrames=1,sheetContentWidth=475,sheetContentHeight=309 } )
		map15sheeto4=graphics.newImageSheet( "goh/carte/level15/right_trees.png", { width=559, height=363, numFrames=1,sheetContentWidth=559,sheetContentHeight=363 } )
	end
		
	hg=display.newImage(map15sheethg,1) --display.newImage( "goh/carte/level2/hd.jpg", -1024,-512,true )
	hg.x=-1024
	hg.y=-512
	hd=display.newImage(map15sheethd,1) --display.newImage( "goh/carte/level2/hg.jpg",1024,-512,true )
	hd.x=1024
	hd.y=-512
	bg=display.newImage(map15sheetbg,1) --display.newImage( "goh/carte/level2/bd.jpg", -1024,512,true )
	bg.x=-1024
	bg.y=512
	bd=display.newImage(map15sheetbd,1) --display.newImage( "goh/carte/level2/bg.jpg", 1024,512,true )
	bd.x=1024
	bd.y=512
	-- obd=display.newImage(map1sheetobd,1) --display.newImage( "goh/carte/level2/bg.jpg", 1024,512,true )
	-- obd.x=1024
	-- obd.y=512
	if pole==0 then
		map1=display.newGroup()
		map1:insert(hg)
		map1:insert(hd)
		map1:insert(bg)
		map1:insert(bd)
	elseif pole==1 then
		print(map2)
		map2=display.newGroup()
		map2:insert(hg)
		map2:insert(hd)
		map2:insert(bg)
		map2:insert(bd)
	end
end
t.donneebase=function ()--donnees de bases sur le niveau
	local tunededep=200
	local nbperso=leveldata[15].life
	if modeinfini or modesquelette then
		tunededep=tunedep
		nbperso=10
	end
	argentdep=-(tunededep)*3--hugo modifier uniquement le nombre le reste permet de crypter la donné-------------------------------------------------------------------
	ennemipassedep=nbperso--nombre d'ennemi qui peuvent encore passer avant qu'on perdre---hugo------------------------------------------------------------------------------------------------------------------
end

t.chemi=function()--donnees sur les differents points de la carte
local point= require( "point" )
genepointinit=87
pointdep={}--entré secondaire 
pointdep[1]=14
pointdep[2]=43
pointdep[3]=26

intersection={}
intersection.nb=14
intersection[1]={pt=17, ty=1, un=74, deux=19, proba=1}
intersection[2]={pt=3, ty=1, un=57, deux=5, proba=1}
intersection[3]={pt=12, ty=0, un=83}
intersection[4]={pt=13, ty=0, un=83}
intersection[5]={pt=71, ty=0, un=86}
intersection[6]={pt=72, ty=0, un=86}
intersection[7]={pt=41, ty=0, un=86}
intersection[8]={pt=42, ty=0, un=86}
intersection[9]={pt=83, ty=0, un=39}
intersection[10]={pt=84, ty=0, un=39}
intersection[11]={pt=24, ty=0, un=65}
intersection[12]={pt=25, ty=0, un=65}
intersection[13]={pt=54, ty=0, un=69}
intersection[14]={pt=55, ty=0, un=69}

cheminarr=nil
-- cheminarr={} --si des chemins sont des arrivés
-- cheminarr[1]=25 --fin numero 2 du chemin
-- cheminarr[2]=12 --fin numero 3 du chemin

cheminnb=93-- --nombre de point definisant le chemin -1--------------------------------------------------------------------------------------------------
chemin={}
--chemin[10].rayon=1000 --taille de la zone ou peut se trouver les gentils
--chemin[10].mechant=0.2 --recerement du chemin ils vont plus etre aussi ecarté
chemin[1]=point.new(-614,-168)	chemin[1].mechant=3.5	chemin[1].rayon=10000
chemin[2]=point.new(-573,-152)	chemin[2].mechant=2.7	chemin[2].rayon=10000
chemin[3]=point.new(-532,-138)	chemin[3].mechant=2		chemin[3].rayon=10000
chemin[4]=point.new(-504,-99)	chemin[4].mechant=2		chemin[4].rayon=5000
chemin[5]=point.new(-469,-73)	chemin[5].mechant=1.4	chemin[5].rayon=3000
chemin[6]=point.new(-428,-56)	chemin[6].mechant=1		chemin[6].rayon=3000
chemin[7]=point.new(-387,-37)	chemin[7].mechant=1		chemin[7].rayon=3000
chemin[8]=point.new(-349,-22)	chemin[8].mechant=1.2	chemin[8].rayon=3000
chemin[9]=point.new(-320,-3)	chemin[9].mechant=1.9	chemin[9].rayon=1000
chemin[10]=point.new(-287,11)	chemin[10].mechant=2.6	chemin[10].rayon=1000
chemin[11]=point.new(-235,34)	chemin[11].mechant=3	chemin[11].rayon=20000
chemin[12]=point.new(-193,48)	chemin[12].mechant=2.6	chemin[12].rayon=1000
chemin[13]=point.new(-154,68)	chemin[13].mechant=1.9	chemin[13].rayon=1000
chemin[14]=point.new(-614,219)	chemin[14].mechant=3.7	chemin[14].rayon=22000
chemin[15]=point.new(-569,208)	chemin[15].mechant=3.4	chemin[15].rayon=22000
chemin[16]=point.new(-530,197)	chemin[16].mechant=2.7	chemin[16].rayon=22000
chemin[17]=point.new(-487,185)	chemin[17].mechant=2	chemin[17].rayon=22000
chemin[18]=point.new(-466,130)	chemin[18].mechant=2	chemin[18].rayon=9000
chemin[19]=point.new(-432,104)	chemin[19].mechant=2.2	chemin[19].rayon=6500
chemin[20]=point.new(-390,87)	chemin[20].mechant=1.9	chemin[20].rayon=6000
chemin[21]=point.new(-358,69)	chemin[21].mechant=1.6	chemin[21].rayon=5500
chemin[22]=point.new(-319,51)	chemin[22].mechant=2	chemin[22].rayon=5000
chemin[23]=point.new(-278,21)	chemin[23].mechant=3	chemin[23].rayon=1000
chemin[24]=point.new(-242,1)	chemin[24].mechant=2.8	chemin[24].rayon=1000
chemin[25]=point.new(-207,-28)	chemin[25].mechant=2.6	chemin[25].rayon=1000
chemin[26]=point.new(405,306)	chemin[26].mechant=1.1	chemin[26].rayon=3500
chemin[27]=point.new(362,292)	chemin[27].mechant=1.1	chemin[27].rayon=3000
chemin[28]=point.new(319,278)	chemin[28].mechant=1.1	chemin[28].rayon=3000
chemin[29]=point.new(276,265)	chemin[29].mechant=1.1	chemin[29].rayon=3500
chemin[30]=point.new(232,253)	chemin[30].mechant=1.1	chemin[30].rayon=3500
chemin[31]=point.new(189,238)	chemin[31].mechant=1.1	chemin[31].rayon=3500
chemin[32]=point.new(146,225)	chemin[32].mechant=1.1	chemin[32].rayon=3500
chemin[33]=point.new(103,209)	chemin[33].mechant=1	chemin[33].rayon=3000
chemin[34]=point.new(61,191)	chemin[34].mechant=1.2	chemin[34].rayon=3500
chemin[35]=point.new(20,170)	chemin[35].mechant=1.7	chemin[35].rayon=4000
chemin[36]=point.new(-14,138)	chemin[36].mechant=2	chemin[36].rayon=6000
chemin[37]=point.new(-22,120)	chemin[37].mechant=2	chemin[37].rayon=1000
chemin[38]=point.new(25,88)		chemin[38].mechant=1.8	chemin[38].rayon=5000
chemin[39]=point.new(69,74)		chemin[39].mechant=1.7	chemin[39].rayon=3000
chemin[40]=point.new(110,50)	chemin[40].mechant=2	chemin[40].rayon=5000
chemin[41]=point.new(151,28)	chemin[41].mechant=2.5	chemin[41].rayon=6000
chemin[42]=point.new(194,16)	chemin[42].mechant=2.5	chemin[42].rayon=7000
chemin[43]=point.new(-161,-308)	chemin[43].mechant=1.2	chemin[43].rayon=3000
chemin[44]=point.new(-122,-290)	chemin[44].mechant=1.2	chemin[44].rayon=3000
chemin[45]=point.new(-82,-272)	chemin[45].mechant=1.2	chemin[45].rayon=3000
chemin[46]=point.new(-40,-258)	chemin[46].mechant=1	chemin[46].rayon=3000
chemin[47]=point.new(0,-244)	chemin[47].mechant=1.3	chemin[47].rayon=3000
chemin[48]=point.new(43,-228)	chemin[48].mechant=1.3	chemin[48].rayon=3000
chemin[49]=point.new(85,-213)	chemin[49].mechant=1.2	chemin[49].rayon=3000
chemin[50]=point.new(124,-193)	chemin[50].mechant=1.5	chemin[50].rayon=3000
chemin[51]=point.new(125,-151)	chemin[51].mechant=1.4	chemin[51].rayon=3000
chemin[52]=point.new(85,-131)	chemin[52].mechant=1.2	chemin[52].rayon=3000
chemin[53]=point.new(41,-118)	chemin[53].mechant=1.2	chemin[53].rayon=3000
chemin[54]=point.new(1,-103)	chemin[54].mechant=1.3	chemin[54].rayon=3000
chemin[55]=point.new(-17,-74)	chemin[55].mechant=1.2	chemin[55].rayon=1000
chemin[56]=point.new(-486,-149)	chemin[56].mechant=1.5	chemin[56].rayon=7000
chemin[57]=point.new(-435,-154)	chemin[57].mechant=1.5	chemin[57].rayon=5000
chemin[58]=point.new(-397,-145)	chemin[58].mechant=1.5	chemin[58].rayon=5000
chemin[59]=point.new(-363,-137)	chemin[59].mechant=1.5	chemin[59].rayon=5000
chemin[60]=point.new(-318,-120)	chemin[60].mechant=1.5	chemin[60].rayon=5500
chemin[61]=point.new(-283,-113)	chemin[61].mechant=1.5	chemin[61].rayon=5500
chemin[62]=point.new(-247,-105)	chemin[62].mechant=1.5	chemin[62].rayon=5500
chemin[63]=point.new(-203,-89)	chemin[63].mechant=2	chemin[63].rayon=6500
chemin[64]=point.new(-166,-73)	chemin[64].mechant=2.2	chemin[64].rayon=1000
chemin[65]=point.new(-121,-81)	chemin[65].mechant=1.7	chemin[65].rayon=3000
chemin[66]=point.new(-79,-81)	chemin[66].mechant=1.5	chemin[66].rayon=3000
chemin[67]=point.new(-37,-81)	chemin[67].mechant=1.7	chemin[67].rayon=3000
chemin[68]=point.new(12,-70)	chemin[68].mechant=1.2	chemin[68].rayon=1000
chemin[69]=point.new(56,-55)	chemin[69].mechant=1	chemin[69].rayon=1000
chemin[70]=point.new(99,-42)	chemin[70].mechant=2	chemin[70].rayon=6000
chemin[71]=point.new(141,-31)	chemin[71].mechant=2.2	chemin[71].rayon=7000
chemin[72]=point.new(186,-23)	chemin[72].mechant=2.2	chemin[72].rayon=8000
chemin[73]=point.new(-422,200)	chemin[73].mechant=1.2	chemin[73].rayon=12000
chemin[74]=point.new(-385,210)	chemin[74].mechant=1.5	chemin[74].rayon=8000
chemin[75]=point.new(-342,209)	chemin[75].mechant=1.9	chemin[75].rayon=6000
chemin[76]=point.new(-306,196)	chemin[76].mechant=2	chemin[76].rayon=6000
chemin[77]=point.new(-271,185)	chemin[77].mechant=2	chemin[77].rayon=6000
chemin[78]=point.new(-239,171)	chemin[78].mechant=2.2	chemin[78].rayon=6000
chemin[79]=point.new(-209,153)	chemin[79].mechant=2.3	chemin[79].rayon=7000
chemin[80]=point.new(-177,134)	chemin[80].mechant=3	chemin[80].rayon=8000
chemin[81]=point.new(-148,113)	chemin[81].mechant=3	chemin[81].rayon=9000
chemin[82]=point.new(-120,86)	chemin[82].mechant=2	chemin[82].rayon=1000
chemin[83]=point.new(-79,97)	chemin[83].mechant=2.2	chemin[83].rayon=7000
chemin[84]=point.new(-31,101)	chemin[84].mechant=2.2	chemin[84].rayon=1000
chemin[85]=point.new(229,-10)	chemin[85].mechant=3	chemin[85].rayon=9000
chemin[86]=point.new(273,-10)	chemin[86].mechant=3	chemin[86].rayon=9000
chemin[87]=point.new(318,-12)	chemin[87].mechant=3	chemin[87].rayon=9000
chemin[88]=point.new(366,-15)	chemin[88].mechant=2.9	chemin[88].rayon=1000
chemin[89]=point.new(414,-17)	chemin[89].mechant=2.8	chemin[89].rayon=1000
chemin[90]=point.new(458,-23)	chemin[90].mechant=2.4	chemin[90].rayon=1000
chemin[91]=point.new(504,-22)	chemin[91].mechant=2.2	chemin[91].rayon=1000
chemin[92]=point.new(548,-25)	chemin[92].mechant=2.2	chemin[92].rayon=1000
chemin[93]=point.new(591,-30)	chemin[93].mechant=2	chemin[93].rayon=1000
chemin[94]=point.new(610,-32)	chemin[94].mechant=1.8	chemin[94].rayon=100000

obstacle0nb=0
obstacle0={} --obstacle de 


obstaclenb=14
obstacle={}
obstacle[1]=point.new(-613,7)
obstacle[2]=point.new(-604,-302)
obstacle[3]=point.new(-539,-292)
obstacle[4]=point.new(-473,-280)
obstacle[5]=point.new(-409,-295)
obstacle[6]=point.new(-348,-292)
obstacle[7]=point.new(-270,-302)
obstacle[8]=point.new(58,-299)
obstacle[9]=point.new(312,-149)
obstacle[10]=point.new(288,100)
obstacle[11]=point.new(224,304)
obstacle[12]=point.new(-128,-95)
obstacle[13]=point.new(-92,-98)
obstacle[14]=point.new(-43,-100)

obstacle1nb=6--nombre de point definisant le nombre de point du gros obstacle
obstacle1={}--gros cercle
obstacle1[1]=point.new(398,-298)
obstacle1[2]=point.new(331,-293)
obstacle1[3]=point.new(237,-295)
obstacle1[4]=point.new(399,88)
obstacle1[5]=point.new(593,249)
obstacle1[6]=point.new(486,168)


--mine:
mineinfo={}
mineinfo.nb=1
mineinfo[1]=point.new(20,-25)
mineinfo[1].nbmine=1

--obstaclsold.nb=0 --nombre d'obstacle ou les soldats ne peuvent pas aller.
-- obstaclsold[1]=point.new(-55,-10)
-- obstaclsold[1].point=10
-- obstaclsold[1].rayon=1000
-- obstaclsold[2]=point.new(0,-10)

 end
t.obsim=function()
if obstacleim==nil then
	obstacleim={}
end
obstacleim[1]=display.newImage(map15sheeto1,1)
obstacleim[1].anchorY=1
obstacleim[1].x=-1840.5
obstacleim[1].y=1180
obstacleim[2]=display.newImage(map15sheeto2,1)
obstacleim[2].anchorY=1
obstacleim[2].x=-1189.5
obstacleim[2].y=-151
obstacleim[3]=display.newImage(map15sheeto3,1)
obstacleim[3].anchorY=1
obstacleim[3].x=-1104.5
obstacleim[3].y=561
obstacleim[4]=display.newImage(map15sheeto4,1)
obstacleim[4].anchorY=1
obstacleim[4].x=1406.5
obstacleim[4].y=286
obstacleim[5]=display.newImage(objetdec[3],10)
obstacleim[5].anchorY=1
obstacleim[5].x=283.5
obstacleim[5].y=903
obstacleim[6]=display.newImage(objetdec[3],12)
obstacleim[6].anchorY=1
obstacleim[6].x=1017.5
obstacleim[6].y=522

end
t.vague=function()--donnees sur les vagues du niveau
vague={}
local k=nil
--nbvague=5--15
for k=1,leveldata[15].wave,1 do
	vague[k]={}
	vague[k][1]=200
end
vague[1]={}
vague[2]={252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,0,0,0,0,0,0,0,0,253,0,253,0,253,0,253,0,253,0,253,0,253,0,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,244,244,244,244,244,244,244,244,244,9,244,244,244,244,244,244,244,244,244,9,244,244,244,244,244,244,244,244,244,9,244,244,244,244,244,244,244,244,244,9,244,244,244,244,244,244,244,244,244,9,244,244,244,244,244,244,244,244,244,0,0,0,0,0,0}
vague[3]={-1,213,-1,230,0,0,-1,230,-1,207,-1,208,-1,207,-1,208,-1,207,0,0,0,0,-1,230,-1,207,-1,208,-1,207,-1,208,-1,207,0,0,-1,230,-1,207,-1,208,-1,207,-1,208,-1,207,0,0,-1,230,-1,207,-1,208,-1,207,-1,208,-1,207,0,0,-1,230,-1,207,-1,208,-1,207,-1,208,-1,207,0,0,-1,230,-1,207,-1,208,-1,207,-1,208,-1,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,0,0,0,0,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
vague[4]={5,209,209,209,209,209,-1,5,209,209,209,209,209,0,0,0,-1,216,-1,216,-1,216,-1,203,0,-1,216,-1,216,-1,216,-1,203,0,-1,216,-1,216,-1,216,-1,203,0,-1,216,-1,216,-1,216,-1,203,0,-1,216,-1,216,-1,216,-1,203,0,-1,216,-1,216,-1,216,-1,203,0,0,0,0,0,0,0,0,-1,2,203,203,-1,2,203,203,-1,2,203,203,-1,2,203,203,-1,2,203,203,-1,2,203,203,-1,2,203,203,-1,2,203,203,-1,2,203,203,-1,2,203,203,-1,2,203,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,3,263,263,263,-1,3,263,263,263,-1,3,263,263,263,0,0,0,0,-1,3,263,263,263,-1,3,263,263,263,-1,3,263,263,263,-1,3,263,263,263,0,0,0,0,-1,3,263,263,263,-1,3,263,263,263,-1,3,263,263,263,-1,3,263,263,263,-1,3,263,263,263,204,-1,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
vague[5]={-1,237,0,0,237,237,-1,280,0,0,237,237,280,237,237,280,-1,281,0,0,0,237,237,280,237,237,280,237,237,280,237,237,280,281,281,-1,282,0,0,0,0,0,0,237,237,280,237,237,280,237,237,280,237,237,280,281,281,237,237,280,237,237,280,237,237,280,237,237,280,281,281,282,282,-1,283,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,221,221,221,221,221,221,221,221,221,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,220,-1,204,204,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
vague[6]={5,251,251,251,251,251,-1,5,251,251,251,251,251,0,0,0,5,251,251,251,251,251,-1,5,251,251,251,251,251,0,0,0,5,251,251,251,251,251,-1,5,251,251,251,251,251,0,0,0,0,0,0,0,0,5,252,252,252,252,252,-1,5,252,252,252,252,252,5,252,252,252,252,252,-1,5,252,252,252,252,252,0,0,0,0,0,0,0,0,0,5,253,253,253,253,253,-1,5,253,253,253,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,-1,5,238,238,238,238,238,5,238,238,238,238,238,0,0,0,0,0,0,0,0,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,0,0,0,0,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,-1,5,237,237,237,237,237,5,237,237,237,237,237,0,0,0,0,0,0,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,0,0,0,0,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,5,244,244,244,244,244,5,244,244,244,244,244,-1,204,204,-1,204,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
vague[7]={-1,204,204,-1,204,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
vague[8]={-1,272,0,0,0,0,0,0,272,272,-1,272,-1,272,272,272,-1,272,-1,272,272,272,-1,272,-1,272,0,0,0,3,215,207,208,-1,3,215,207,208,3,215,207,208,-1,3,215,207,208,3,215,207,208,-1,3,215,207,208,3,215,207,208,-1,3,215,207,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,230,230,230,230,230,0,0,0,-1,5,207,207,207,207,207,0,0,0,-2,5,208,208,208,208,208,0,0,0,-3,5,203,203,203,203,203,0,0,0,0,5,230,230,230,230,230,0,0,0,-1,5,207,207,207,207,207,0,0,0,-2,5,208,208,208,208,208,0,0,0,-3,5,203,203,203,203,203,0,0,0,0,0,0,5,230,230,230,230,230,0,0,0,-1,5,207,207,207,207,207,0,0,0,-2,5,208,208,208,208,208,0,0,0,-3,5,203,203,203,203,203,0,0,0,0,0,0,5,230,230,230,230,230,0,0,0,-1,5,207,207,207,207,207,0,0,0,-2,5,208,208,208,208,208,0,0,0,-3,5,203,203,203,203,203,0,0,0,0,0,0,5,230,230,230,230,230,0,0,0,-1,5,207,207,207,207,207,0,0,0,-2,5,208,208,208,208,208,0,0,0,-3,5,203,203,203,203,203,0,0,0,0,0,0,5,230,230,230,230,230,0,0,0,-1,5,207,207,207,207,207,0,0,0,-2,5,208,208,208,208,208,0,0,0,-3,5,203,203,203,203,203,0,0,0,0,0,0,0,204,-1,268,-1,268,0,0,0,0,0,0,0,0,0,0}
vague[9]={}
vague[10]={204,204,-1,204,-1,204,0,0,0,0,0,0,0,0,0,0,5,226,226,226,226,226,-1,5,227,227,227,227,227,-2,2,228,228,-3,2,228,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
vague[11]={9,244,244,244,244,244,244,244,244,244,-1,9,237,237,237,237,237,237,237,237,237,-2,9,238,238,238,238,238,238,238,238,238,-3,9,238,238,238,238,238,238,238,238,238,9,244,244,244,244,244,244,244,244,244,-1,9,237,237,237,237,237,237,237,237,237,-2,9,238,238,238,238,238,238,238,238,238,-3,9,238,238,238,238,238,238,238,238,238,9,244,244,244,244,244,244,244,244,244,-1,9,237,237,237,237,237,237,237,237,237,-2,9,238,238,238,238,238,238,238,238,238,-3,9,238,238,238,238,238,238,238,238,238,9,244,244,244,244,244,244,244,244,244,-1,9,237,237,237,237,237,237,237,237,237,-2,9,238,238,238,238,238,238,238,238,238,-3,9,238,238,238,238,238,238,238,238,238,9,244,244,244,244,244,244,244,244,244,-1,9,237,237,237,237,237,237,237,237,237,-2,9,238,238,238,238,238,238,238,238,238,-3,9,238,238,238,238,238,238,238,238,238,9,244,244,244,244,244,244,244,244,244,-1,9,237,237,237,237,237,237,237,237,237,-2,9,238,238,238,238,238,238,238,238,238,-3,9,238,238,238,238,238,238,238,238,238,9,244,244,244,244,244,244,244,244,244,-1,9,237,237,237,237,237,237,237,237,237,-2,9,238,238,238,238,238,238,238,238,238,-3,9,238,238,238,238,238,238,238,238,238,9,244,244,244,244,244,244,244,244,244,-1,9,237,237,237,237,237,237,237,237,237,-2,9,238,238,238,238,238,238,238,238,238,-3,9,238,238,238,238,238,238,238,238,238,9,244,244,244,244,244,244,244,244,244,-1,9,237,237,237,237,237,237,237,237,237,-2,9,238,238,238,238,238,238,238,238,238,-3,9,238,238,238,238,238,238,238,238,238,9,244,244,244,244,244,244,244,244,244,-1,9,237,237,237,237,237,237,237,237,237,-2,9,238,238,238,238,238,238,238,238,238,-3,9,238,238,238,238,238,238,238,238,238,9,244,244,244,244,244,244,244,244,244,-1,9,237,237,237,237,237,237,237,237,237,-2,9,238,238,238,238,238,238,238,238,238,-3,9,238,238,238,238,238,238,238,238,238,9,244,244,244,244,244,244,244,244,244,-1,9,237,237,237,237,237,237,237,237,237,-2,9,238,238,238,238,238,238,238,238,238,-3,9,238,238,238,238,238,238,238,238,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
end
t.vaguewave=function()
	vague={}
	vague[1]={9,228,228,228,228,228,228,228,228,228,9,204,204,204,204,204,204,204,204,204,-1,9,228,228,228,228,228,228,228,228,228,-1,9,204,204,204,204,204,204,204,204,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,269,269,269,269,269,269,269,269,269,0,0,0,-1,269,-1,269,-1,269,-1,269,-1,269,-1,269,-1,269,-1,269,-1,269,0,0,0,0,0,0,-2,269,-2,269,-2,269,-2,269,-2,269,-2,269,-2,269,-2,269,-2,269,0,0,0,0,0,0,-3,269,-3,269,-3,269,-3,269,-3,269,-3,269,-3,269,-3,269,-3,269}
end
return t